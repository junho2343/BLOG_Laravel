-- phpMyAdmin SQL Dump
-- version 4.8.3
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- 생성 시간: 18-11-13 09:50
-- 서버 버전: 10.1.36-MariaDB
-- PHP 버전: 7.2.11

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- 데이터베이스: `blog`
--

-- --------------------------------------------------------

--
-- 테이블 구조 `category`
--

CREATE TABLE `category` (
  `idx` int(10) UNSIGNED NOT NULL,
  `name` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 테이블의 덤프 데이터 `category`
--

INSERT INTO `category` (`idx`, `name`) VALUES
(1, 'JavaScript'),
(2, 'PHP'),
(3, 'Node.js'),
(5, 'Sublime Text'),
(6, 'Node.js + Vue.js');

-- --------------------------------------------------------

--
-- 테이블 구조 `migrations`
--

CREATE TABLE `migrations` (
  `id` int(10) UNSIGNED NOT NULL,
  `migration` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `batch` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 테이블의 덤프 데이터 `migrations`
--

INSERT INTO `migrations` (`id`, `migration`, `batch`) VALUES
(1, '2014_10_12_000000_create_users_table', 1),
(2, '2014_10_12_100000_create_password_resets_table', 1),
(3, '2018_11_09_045753_create_category_table', 2),
(4, '2018_11_09_085901_create_post_table', 3);

-- --------------------------------------------------------

--
-- 테이블 구조 `password_resets`
--

CREATE TABLE `password_resets` (
  `email` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `token` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

-- --------------------------------------------------------

--
-- 테이블 구조 `post`
--

CREATE TABLE `post` (
  `idx` int(10) UNSIGNED NOT NULL,
  `title` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `content` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `content_mark` text COLLATE utf8mb4_unicode_ci NOT NULL,
  `date` date NOT NULL,
  `count` int(11) NOT NULL,
  `category` int(11) NOT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 테이블의 덤프 데이터 `post`
--

INSERT INTO `post` (`idx`, `title`, `content`, `content_mark`, `date`, `count`, `category`, `created_at`, `updated_at`) VALUES
(2, 'test', '# 안녕하세여\r\n## 안녕하세여\r\n### 안녕하세여\r\n#### 안녕하세여\r\n##### 안녕하세여\r\n<a>lll</a>\r\n\r\n```\r\nafasfasfsa\r\n<a>www</a>\r\nsddgd\r\n```\r\n###### 안녕하세여\r\nasdasd', '&lt;h1&gt;안녕하세여\r&lt;/h1&gt;&lt;h2&gt;안녕하세여\r&lt;/h2&gt;&lt;h3&gt;안녕하세여\r&lt;/h3&gt;&lt;h4&gt;안녕하세여\r&lt;/h4&gt;&lt;h5&gt;안녕하세여\r&lt;/h5&gt;&amp;lt;a&amp;gt;lll&amp;lt;/a&amp;gt;\r\r&lt;pre class=\'pre\'&gt;afasfasfsa\r&amp;lt;a&amp;gt;www&amp;lt;/a&amp;gt;\rsddgd\r&lt;/pre&gt;&lt;h6&gt;안녕하세여\r&lt;/h6&gt;asdasd', '2018-11-13', 0, 1, NULL, NULL),
(6, 'Sublime Text 3 단축키 정리', '# 기본 단축키 및 기능 목록\r\n\r\n1. 중복 선택 : Ctrl + D\r\n2. 전체 선택 : Alt + F3\r\n3. 다중선택 : Ctrl + Alt + up,down\r\n4. 마우스 다중 선택 : Ctrl + 마우스선택\r\n5. 단어 단위 이동 : Ctrl + left / right\r\n6. 단어 단위 드래그 : Ctrl + Shift + left / right\r\n7. 한 줄 복사 : Ctrl + Shift + D\r\n8. 한 줄 삭제 : Shift + Delete\r\n9. 줄 단위 이동 : Ctrl + Shift + Up / Down\r\n10. 대문자로 : Ctrl + k + U\r\n11. 소문자로 : Ctrl + k + L\r\n12. 전체선택 : Ctrl + A\r\n13. 라인선택 : Ctrl + Shift + L\r\n14. line by line 매칭\r\n15. 프로젝트 등록\r\n16. 파일 찾기 : Ctrl + P\r\n17. 라인으로 이동 : Ctrl + G\r\n18. Syntax 변경\r\n19. 랜덤 문자 생성(Lorem)\r\n20. 접기 : Ctrl + Shift + [\r\n21. 펼치기 : Ctrl + Shift + ]\r\n22. 검색 : Ctrl + F\r\n23. 전체 검색 : Ctrl + Shift + F\r\n24. 전체 저장\r\n25. 이전탭 / 다음탭 : Ctrl + PageUp/PageDown\r\n26. 끝으로 이동 : end\r\n27. 처음으로 이동 : home\r\n28. new process : Ctrl + Shift + N\r\n29. new file : Ctrl + N\r\n30. 닫기 : Ctrl + W\r\n31. 화면 분할 : alt + shift + 1 ~ 9\r\n32. last tab open : ctrl + shift + t\r\n33. 탭 위치 변경\r\n34. 현 위치 enter : ctrl + enter', '&lt;h1&gt;기본 단축키 및 기능 목록\r&lt;/h1&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;1. 중복 선택 : Ctrl + D\r&lt;/p&gt;&lt;p&gt;2. 전체 선택 : Alt + F3\r&lt;/p&gt;&lt;p&gt;3. 다중선택 : Ctrl + Alt + up,down\r&lt;/p&gt;&lt;p&gt;4. 마우스 다중 선택 : Ctrl + 마우스선택\r&lt;/p&gt;&lt;p&gt;5. 단어 단위 이동 : Ctrl + left / right\r&lt;/p&gt;&lt;p&gt;6. 단어 단위 드래그 : Ctrl + Shift + left / right\r&lt;/p&gt;&lt;p&gt;7. 한 줄 복사 : Ctrl + Shift + D\r&lt;/p&gt;&lt;p&gt;8. 한 줄 삭제 : Shift + Delete\r&lt;/p&gt;&lt;p&gt;9. 줄 단위 이동 : Ctrl + Shift + Up / Down\r&lt;/p&gt;&lt;p&gt;10. 대문자로 : Ctrl + k + U\r&lt;/p&gt;&lt;p&gt;11. 소문자로 : Ctrl + k + L\r&lt;/p&gt;&lt;p&gt;12. 전체선택 : Ctrl + A\r&lt;/p&gt;&lt;p&gt;13. 라인선택 : Ctrl + Shift + L\r&lt;/p&gt;&lt;p&gt;14. line by line 매칭\r&lt;/p&gt;&lt;p&gt;15. 프로젝트 등록\r&lt;/p&gt;&lt;p&gt;16. 파일 찾기 : Ctrl + P\r&lt;/p&gt;&lt;p&gt;17. 라인으로 이동 : Ctrl + G\r&lt;/p&gt;&lt;p&gt;18. Syntax 변경\r&lt;/p&gt;&lt;p&gt;19. 랜덤 문자 생성(Lorem)\r&lt;/p&gt;&lt;p&gt;20. 접기 : Ctrl + Shift + [\r&lt;/p&gt;&lt;p&gt;21. 펼치기 : Ctrl + Shift + ]\r&lt;/p&gt;&lt;p&gt;22. 검색 : Ctrl + F\r&lt;/p&gt;&lt;p&gt;23. 전체 검색 : Ctrl + Shift + F\r&lt;/p&gt;&lt;p&gt;24. 전체 저장\r&lt;/p&gt;&lt;p&gt;25. 이전탭 / 다음탭 : Ctrl + PageUp/PageDown\r&lt;/p&gt;&lt;p&gt;26. 끝으로 이동 : end\r&lt;/p&gt;&lt;p&gt;27. 처음으로 이동 : home\r&lt;/p&gt;&lt;p&gt;28. new process : Ctrl + Shift + N\r&lt;/p&gt;&lt;p&gt;29. new file : Ctrl + N\r&lt;/p&gt;&lt;p&gt;30. 닫기 : Ctrl + W\r&lt;/p&gt;&lt;p&gt;31. 화면 분할 : alt + shift + 1 ~ 9\r&lt;/p&gt;&lt;p&gt;32. last tab open : ctrl + shift + t\r&lt;/p&gt;&lt;p&gt;33. 탭 위치 변경\r&lt;/p&gt;&lt;p&gt;34. 현 위치 enter : ctrl + enter&lt;/p&gt;', '2018-11-13', 3, 5, NULL, NULL),
(8, 'Laravel을 활용한 기술블로그 만들기(미완성)', '## 시작하기\r\nPHP 사용 MVC Framework 중 점유율이 가장 높은 Laravel을 사용하고 싶어서 만들게되었습니다.\r\n\r\n류승열 교수님의 Laravel 5.4 2017 기능경기 특별교육 교재를 참고하여 만들었습니다.\r\n\r\n## 필수설치\r\n\r\n##### Xampp 설치\r\nhttps://www.apachefriends.org/index.html xampp를 OS에  맞게 설치\r\n\r\n##### Composer 설치\r\nComposer는 PHP에서 의존성 관리 도구라고 알려져 있는 소프트웨어로 여러 PHP 패키지를 설치되어 있는 PHP의 버전 또는 환경에 맞게설치해주는 역할을 한다.\r\n \r\nhttps://getcomposer.org/download/ Composer 설치\r\n\r\n## Laravel Install\r\n\r\ncmd를 실행하여 c:/xampp/htdocs 로 이동 (자신이 설치한 xampp 위치)\r\n\r\nComposer 설치여부 확인  cmd 창에 composer 입력 후 엔터\r\n도움말이 나왔다면 설치완료 안 나올 경우 다시 설치\r\n```\r\ncomposer\r\n```\r\n\r\nLaravel을 htdocs 폴더 아래 laravel_blog 폴더에 설치하기\r\n```\r\ncomposer create-project --prefer-dist laravel/laravel_blog\r\n```\r\n\r\n## Laravel 설치확인\r\n\r\nxampp를 실행 시키고 접속해보면 페이지가 나오지 않을것입니다.\r\nUser가 웹사이트를 방문했을 때 접근해야 하는 사이트는 이 중에 public 입니다. 즉, http://localhost/laravel_blog/public 에 접근해야 Laravel의 첫 페이지를 열 수 있다. \r\n\r\n## Laravel 설치 주소에서 Laravel/public 제거하기\r\n\r\npublic 폴더 아래에 있는 .htaccess 파일을 htdocs로 복사해서 붙여 넣는다. laravel_blog 폴더에 있는 server.php를 복사해서 htdocs에 붙여 넣고 index.php로 이름을\r\n변경한 후 다음과 index.php 파일의 마지막 행의 코드를 다음과 같이 수정합니다.\r\n\r\n```\r\n변경 전: require_once __DIR__.\'/public/index.php\';\r\n변경 후: require_once __DIR__.\'/laravel_blog/public/index.php\'; \r\n```\r\n위와 같이 변경 한 후 주소 창에 http://localhost를 입력해보면 정상적으로 출력이 될 것입니다.\r\n\r\n## Laravel 환경설정\r\n\r\n Laravel을 처음 설치하면 .env 파일을 수정하여 환경을 설정해야 합니다.\r\n\r\n```\r\nDB_DATABASE=blog\r\nDB_USERNAME=root\r\nDB_PASSWORD=\r\n```\r\nxampp는 USERNAME = root, PASSWORD = 공백 이기 때문에 이와 같이 바꿔 줍니다.\r\n\r\nlocalhost/phpmyadmin 에서 blog 데이터베이스를 만듭니다\r\n\r\n자세한 내용은 너무 복잡하기에 사용한 기능들만 설명하겠습니다\r\n\r\n## 블레이드 템플릿 \r\n\r\nLaravel은 blade 템플릿 엔진을 사용합니다 간단한 문법을 갖고 있어서 배우기 쉽고 가벼운 장점이 있습니다\r\n\r\n/resources/views 폴더에 layouts 폴더를 만듭니다\r\n\r\nmaster.blade.php 파일은 모든 블레이드 템플릿의 마스터 역할을 할 것입니다.\r\n/resources/views/layouts/master.blade.php\r\n```\r\n<!doctype html>\r\n<html lang=\"{{ str_replace(\'_\', \'-\', app()->getLocale()) }}\">\r\n    <head>\r\n        <meta charset=\"utf-8\">\r\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n        <title>Laravel</title>\r\n        <link href=\"https://fonts.googleapis.com/css?family=Nunito:200,600\" rel=\"stylesheet\" type=\"text/css\">\r\n        <link rel=\"stylesheet\" type=\"text/css\" href=\"{{ url(\'/\') }}/public/css/app.css\">\r\n    </head>\r\n    <body>\r\n    	<header>\r\n    		<div class=\"container\">\r\n    			<a href=\"{{ url(\'/\') }}\"><h2>준호의 기술블로그</h2></a>\r\n    			<a href=\"{{ url(\'/admin\') }}\" class=\"btn btn-light\">관리자 모드</a>\r\n    		</div>	\r\n    	</header>\r\n        @yield(\'content\')\r\n    </body>\r\n</html>\r\n\r\n```\r\n블레이드의 가장 주요한 두가지 장점은 _템플릿 상속_과 _섹션_입니다\r\n\r\n@yield 어떤 섹션의 컨텐츠를 나타내는데 사용\r\n@section 말 그대로 내용의 섹션을 정의\r\n@extends 지시어을 사용해 자식 페이지가 어느 레이아웃을 \"상속\" 받을지 명시할 수 있습니다.\r\n\r\n참고사이트 : https://laravel.kr/docs/5.2/blade\r\n\r\nroutes 폴더에 아래에 있는 web.php 는 모든 페이지의 권한을 뜻합니다. \r\n\r\nroutes/web.php\r\n\r\n\r\n\r\n\r\n\r\n', '&lt;h2&gt;시작하기\r&lt;/h2&gt;&lt;p&gt;PHP 사용 MVC Framework 중 점유율이 가장 높은 Laravel을 사용하고 싶어서 만들게되었습니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;류승열 교수님의 Laravel 5.4 2017 기능경기 특별교육 교재를 참고하여 만들었습니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;h2&gt;필수설치\r&lt;/h2&gt;&lt;p&gt;\r&lt;/p&gt;&lt;h5&gt;Xampp 설치\r&lt;/h5&gt;&lt;p&gt;https://www.apachefriends.org/index.html xampp를 OS에  맞게 설치\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;h5&gt;Composer 설치\r&lt;/h5&gt;&lt;p&gt;Composer는 PHP에서 의존성 관리 도구라고 알려져 있는 소프트웨어로 여러 PHP 패키지를 설치되어 있는 PHP의 버전 또는 환경에 맞게설치해주는 역할을 한다.\r&lt;/p&gt;&lt;p&gt; \r&lt;/p&gt;&lt;p&gt;https://getcomposer.org/download/ Composer 설치\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;h2&gt;Laravel Install\r&lt;/h2&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;cmd를 실행하여 c:/xampp/htdocs 로 이동 (자신이 설치한 xampp 위치)\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;Composer 설치여부 확인  cmd 창에 composer 입력 후 엔터\r&lt;/p&gt;&lt;p&gt;도움말이 나왔다면 설치완료 안 나올 경우 다시 설치\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;composer\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;Laravel을 htdocs 폴더 아래 laravel_blog 폴더에 설치하기\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;composer create-project --prefer-dist laravel/laravel_blog\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;h2&gt;Laravel 설치확인\r&lt;/h2&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;xampp를 실행 시키고 접속해보면 페이지가 나오지 않을것입니다.\r&lt;/p&gt;&lt;p&gt;User가 웹사이트를 방문했을 때 접근해야 하는 사이트는 이 중에 public 입니다. 즉, http://localhost/laravel_blog/public 에 접근해야 Laravel의 첫 페이지를 열 수 있다. \r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;h2&gt;Laravel 설치 주소에서 Laravel/public 제거하기\r&lt;/h2&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;public 폴더 아래에 있는 .htaccess 파일을 htdocs로 복사해서 붙여 넣는다. laravel_blog 폴더에 있는 server.php를 복사해서 htdocs에 붙여 넣고 index.php로 이름을\r&lt;/p&gt;&lt;p&gt;변경한 후 다음과 index.php 파일의 마지막 행의 코드를 다음과 같이 수정합니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;변경 전: require_once __DIR__.\'/public/index.php\';\r&lt;/p&gt;&lt;p&gt;변경 후: require_once __DIR__.\'/laravel_blog/public/index.php\'; \r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;위와 같이 변경 한 후 주소 창에 http://localhost를 입력해보면 정상적으로 출력이 될 것입니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;h2&gt;Laravel 환경설정\r&lt;/h2&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt; Laravel을 처음 설치하면 .env 파일을 수정하여 환경을 설정해야 합니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;DB_DATABASE=blog\r&lt;/p&gt;&lt;p&gt;DB_USERNAME=root\r&lt;/p&gt;&lt;p&gt;DB_PASSWORD=\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;xampp는 USERNAME = root, PASSWORD = 공백 이기 때문에 이와 같이 바꿔 줍니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;localhost/phpmyadmin 에서 blog 데이터베이스를 만듭니다\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;자세한 내용은 너무 복잡하기에 사용한 기능들만 설명하겠습니다\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;h2&gt;블레이드 템플릿 \r&lt;/h2&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;Laravel은 blade 템플릿 엔진을 사용합니다 간단한 문법을 갖고 있어서 배우기 쉽고 가벼운 장점이 있습니다\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;/resources/views 폴더에 layouts 폴더를 만듭니다\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;master.blade.php 파일은 모든 블레이드 템플릿의 마스터 역할을 할 것입니다.\r&lt;/p&gt;&lt;p&gt;/resources/views/layouts/master.blade.php\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;&amp;lt;!doctype html&amp;gt;\r&lt;/p&gt;&lt;p&gt;&amp;lt;html lang=&amp;quot;{{ str_replace(\'_\', \'-\', app()-&amp;gt;getLocale()) }}&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;head&amp;gt;\r&lt;/p&gt;&lt;p&gt;        &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;        &amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width, initial-scale=1&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;        &amp;lt;title&amp;gt;Laravel&amp;lt;/title&amp;gt;\r&lt;/p&gt;&lt;p&gt;        &amp;lt;link href=&amp;quot;https://fonts.googleapis.com/css?family=Nunito:200,600&amp;quot; rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;        &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; type=&amp;quot;text/css&amp;quot; href=&amp;quot;{{ url(\'/\') }}/public/css/app.css&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;/head&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;body&amp;gt;\r&lt;/p&gt;&lt;p&gt;    	&amp;lt;header&amp;gt;\r&lt;/p&gt;&lt;p&gt;    		&amp;lt;div class=&amp;quot;container&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;    			&amp;lt;a href=&amp;quot;{{ url(\'/\') }}&amp;quot;&amp;gt;&amp;lt;h2&amp;gt;준호의 기술블로그&amp;lt;/h2&amp;gt;&amp;lt;/a&amp;gt;\r&lt;/p&gt;&lt;p&gt;    			&amp;lt;a href=&amp;quot;{{ url(\'/admin\') }}&amp;quot; class=&amp;quot;btn btn-light&amp;quot;&amp;gt;관리자 모드&amp;lt;/a&amp;gt;\r&lt;/p&gt;&lt;p&gt;    		&amp;lt;/div&amp;gt;	\r&lt;/p&gt;&lt;p&gt;    	&amp;lt;/header&amp;gt;\r&lt;/p&gt;&lt;p&gt;        @yield(\'content\')\r&lt;/p&gt;&lt;p&gt;    &amp;lt;/body&amp;gt;\r&lt;/p&gt;&lt;p&gt;&amp;lt;/html&amp;gt;\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;블레이드의 가장 주요한 두가지 장점은 _템플릿 상속_과 _섹션_입니다\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;@yield 어떤 섹션의 컨텐츠를 나타내는데 사용\r&lt;/p&gt;&lt;p&gt;@section 말 그대로 내용의 섹션을 정의\r&lt;/p&gt;&lt;p&gt;@extends 지시어을 사용해 자식 페이지가 어느 레이아웃을 &amp;quot;상속&amp;quot; 받을지 명시할 수 있습니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;참고사이트 : https://laravel.kr/docs/5.2/blade\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;routes 폴더에 아래에 있는 web.php 는 모든 페이지의 권한을 뜻합니다. \r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;routes/web.php\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;&lt;/p&gt;', '2018-11-13', 10, 2, NULL, NULL);
INSERT INTO `post` (`idx`, `title`, `content`, `content_mark`, `date`, `count`, `category`, `created_at`, `updated_at`) VALUES
(9, 'express + vue 를 활용한 자기소개 페이지', '## 시작하기\r\n\r\nexpress 기반 서버 환경에서 vue를 활용한 자기소개 페이지입니다. 절대 완벽하지 않습니다. 공부하는 입장으로 만들어보았습니다. 저의 정보를 어거지로 넣다보니 코드가 다소 복잡할 수 있습니다. 양해 부탁드립니다. 설명도 참고 사이트를 대부분 활용하였습니다.\r\n\r\n참고 사이트 :  http://vuejs.kr/2017/02/05/express-with-vue/\r\n최종 결과물 : https://github.com/junho2343/my-introduce\r\nURL : junhoinfo.herokuapp.com\r\n\r\n## 프로젝트 기본 설정\r\n이번 프로젝트의 기본 디렉터리 구조 입니다. 디렉터리 아래에 express를 사용하는 backend, Vue를 사용하는 frontend 디렉터리가 있습니다.\r\n\r\n_backend\r\n\r\n_frontend\r\n\r\n## express와 express-generator를 이용한 서버 개발\r\n\r\nexpress의 Express 애플리케이션 생성기 문서를 따라 express를 설치하고 앱을 만듭니다.\r\n애플리케이션 생성기 문서 : http://expressjs.com/ko/starter/generator.html\r\n```\r\nnpm install express-generator -g #설치하지 않은 경우\r\nexpress --view=jade backend\r\ncd backend\r\nnpm install\r\nDEBUG=backend:* npm start\r\n```\r\nhttp://localhost:3000에 접속하면 express 앱이 정상적으로 잘 작동하는 것을 확인할 수 있습니다\r\n\r\n저는 데이터 베이스를 사용하지 않고 json파일을 직접 가져오는 방식입니다.\r\n\r\n\r\nbackend/data.json\r\n```\r\n{\r\n    \"profile\": {\r\n        \"github\": \"https://github.com/junho2343\",\r\n        \"kr\": {\r\n            \"name\": \"문준호\",\r\n            \"job\": \"웹 개발자\",\r\n            \"birthday\": \"2000-10-15\",\r\n            \"address\": \"서울특별시 동대문구 사가정로65 (래미안크레시티)\",\r\n            \"korean\": \"한국어\",\r\n            \"english\": \"영어\",\r\n            \"admin\": \"관리자\",\r\n            \"title\": {\r\n                \"profile\": \"프로필\",\r\n                \"name\": \"이름: \",\r\n                \"age\": \"나이: \",\r\n                \"birthday\": \"생년월일: \",\r\n                \"address\": \"주소: \",\r\n                \"school\": \"학력: \",\r\n                \"certificate\": \"자격증\",\r\n                \"career\": \"경력\",\r\n                \"skills\": \"기술\",\r\n                \"github\": \"깃허브: \"\r\n            },\r\n            \"profile\": {\r\n                \"school\": [\r\n                    \"전곡 초등학교 졸업\",\r\n                    \"전농 중학교 졸업\",\r\n                    \"서울 디지텍 고등학교 졸업\"\r\n                ],\r\n                \"certificate\": [\r\n                    \"정보처리기능사\",\r\n                    \"웹디자인기능사\",\r\n                    \"지도제작기능사\",\r\n                    \"아이티큐 마스터\",\r\n                    \"컴퓨터그래픽스운용기능사\"\r\n                ],\r\n                \"skills\": [\r\n                    \"HTML5\",\r\n                    \"CSS3\",\r\n                    \"JavaScript\",\r\n                    \"jQuery\",\r\n                    \"Vue.js\",\r\n                    \"Node.js\",\r\n                    \"PHP\"\r\n                ]\r\n            },\r\n            \"curriculum\": {\r\n                \"2016\": [\r\n                    \"스마트스페이스 동아리 활동\",\r\n                    \"교내 웹/앱 경진대회 대상\"\r\n                ],\r\n                \"2017\": [\r\n                    \"웹 디자인/개발 기능영재반 활동\",\r\n                    \"교내 웹/앱 경진대회 우수상\"\r\n                ],\r\n                \"2018\": [\r\n                    \"서울 지방기능경기대회 은메달\",\r\n                    \"전국기능경기대회 은메달\",\r\n                    \"(주) 플레이오토 입사\"\r\n                ],\r\n                \"2019\": []\r\n            }\r\n        },\r\n        \"en\": {\r\n            \"name\": \"junho mun\",\r\n            \"job\": \"Web Developer\",\r\n            \"birthday\": \"15/10/2000\",\r\n            \"address\": \"65, Sagajeong-ro, Dongdaemun-gu, Seoul, 02553, Rep. of KOREA\",\r\n            \"korean\": \"korean\",\r\n            \"english\": \"english\",\r\n            \"admin\": \"admin\",\r\n            \"title\": {\r\n                \"profile\": \"PROFILE\",\r\n                \"name\": \"name: \",\r\n                \"age\": \"age: \",\r\n                \"birthday\": \"birthday: \",\r\n                \"address\": \"address: \",\r\n                \"school\": \"school: \",\r\n                \"certificate\": \"certificate\",\r\n                \"career\": \"CAREER\",\r\n                \"skills\": \"skills\",\r\n                \"github\": \"github: \"\r\n            },\r\n            \"profile\": {\r\n                \"school\": [\r\n                    \"Jeongok Elementary School Graduation\",\r\n                    \"Junnong Middle School Graduation\",\r\n                    \"Seoul Digitec High School Graduation\"\r\n                ],\r\n                \"certificate\": [\r\n                    \"Information processing Functional engineer\",\r\n                    \"Web Design Functional engineer\",\r\n                    \"Map production Functional engineer\",\r\n                    \"ITQ Master\",\r\n                    \"Computer Graphics Functional engineer\"\r\n                ],\r\n                \"skills\": [\r\n                    \"HTML5\",\r\n                    \"CSS3\",\r\n                    \"JavaScript\",\r\n                    \"jQuery\",\r\n                    \"Vue.js\",\r\n                    \"Node.js\",\r\n                    \"PHP\"\r\n                ]\r\n            },\r\n            \"curriculum\": {\r\n                \"2016\": [\r\n                    \"Smart Space club\",\r\n                    \"School in Web/App Competition grand prize\"\r\n                ],\r\n                \"2017\": [\r\n                    \"Web Design/Development club\",\r\n                    \"School in Web/App Competition excellence prize\"\r\n                ],\r\n                \"2018\": [\r\n                    \"Seoul Regional Function Competition a silver medal\",\r\n                    \"Nationwide Function Competition a silver medal \",\r\n                    \"PLAYAUTO Company Join\"\r\n                ],\r\n                \"2019\": []\r\n            }\r\n        }\r\n    },\r\n    \"lang\": \"en\"\r\n}\r\n```\r\n.이제 위 정보를 가져올 수 있는 API를 만듭니다. 여기서는 두개를 만듭니다.\r\n\r\nJson 데이터를 가져오는 GET방식의 /get\r\nJson 데이터를 수정하는 POST방식의 /set\r\n\r\nbackend/routes/data.js\r\n```\r\nlet express = require(\'express\');\r\nlet router = express.Router();\r\n\r\nconst fs = require(\'fs\')\r\n\r\n\r\n/* GET home page. */\r\nrouter.get(\'/\', function(req, res, next) {\r\n});\r\nrouter.get(\'/get\', function(req, res, next) {\r\n\r\n	fs.readFile(\"data.json\", function (err, data) {\r\n		if(err) throw err;\r\n		res.send(data)\r\n\r\n	})\r\n});\r\nrouter.post(\'/set\', function(req, res, next) {\r\n	let data = JSON.stringify(req.body);\r\n\r\n	fs.writeFile(\'data.json\', data, \'utf8\', function (err) {\r\n		if(err) throw err\r\n	})\r\n});\r\n\r\nmodule.exports = router;\r\n```\r\n이 data.js 파일을 사용할 수 있도록 app.js에 등록합니다.\r\n\r\nbackend/app.js\r\n```\r\n~~~\r\nvar indexRouter = require(\'./routes/index\');\r\nvar dataRouter = require(\'./routes/data\');\r\n~~~\r\napp.use(\'/\', indexRouter);;\r\napp.use(\'/data\', dataRouter);\r\n```\r\n이제 http://localhost:3000/data/get에 접속하면 json에 대한 내용을 가져 올 수 있습니다.\r\n\r\n## Vue.js와 vue-cli를 이용한 프론트엔드 개발\r\n이제 Vue.js로 백엔드에서 작업한 내용을 출력할 차례입니다. 우선 vue-cli 작업을 합니다. 루트 디렉터리에서 실행합니다.\r\n\r\n```\r\nnpm install -g vue-cli  #설치하지 않은 경우\r\nvue init webpack frontend\r\n#프롬프트마다 필요한 설정을 합니다. \r\n#vue-router 추가에 대한 질문은 꼭 Y를 해주세요\r\ncd frontend\r\nnpm install\r\n```\r\n위 작업이 끝나면 express 서버와 연결하기 위한 설정을 해야합니다.\r\n\r\nfrontend/config/index.js 파일을 열어 proxyTable을 찾아 아래 내용을 추가합니다.\r\nfrontend/config/index.js\r\n```\r\nproxyTable: {\r\n  \'/api\': {\r\n    target: \'http://localhost:3000/data\',\r\n    changeOrigin: true,\r\n    pathRewrite: {\r\n      \'^/data\': \'\'\r\n    }\r\n  }\r\n},\r\n```\r\n위 설정을 하면 프론트엔드 개발 중 http://localhost:8080/data 요청이 왔을 경우 http://localhost:3000/data를 프록시로 사용하게 됩니다\r\n\r\nVue 앱의 페이지는 두개 입니다. 전체 내 정보를 볼 수 있는 Index 페이지와 관리자로서 Json파일을 수정 할 수 있는 Admin 페이지 입니다. 이를 위해 두개의 단일 파일 컴포넌트가 필요합니다. 이름은 Index.vue, Admin.vue 입니다.\r\n\r\nfrontend/src/components/Index.vue\r\n```\r\n<template>\r\n  <div class=\"container\" v-if=\"Object.keys(profile).length\">\r\n    <canvas id=\"fire\"></canvas>\r\n    <div class=\"row first\">\r\n      <button class=\"btn btn-light\" @click=\"lang = \'kr\'\" v-html=\"profile.profile[lang].korean\" />\r\n      <button class=\"btn btn-light\" @click=\"lang = \'en\'\" v-html=\"profile.profile[lang].english\" />\r\n      <router-link :to=\"\'/admin\'\"><button class=\"btn btn-light\" v-html=\"profile.profile[lang].admin\" /></router-link>\r\n    </div>\r\n    <div class=\"row\">\r\n      <h2 class=\"page-header\">{{ profile.profile[lang].name.toUpperCase() }} <small>{{ profile.profile[lang].job }}</small></h2>\r\n    </div>\r\n    <div class=\"row\">\r\n      <h3 class=\"page-header\">{{ profile.profile[lang].title.profile }}</h3>\r\n      <p><strong>{{ profile.profile[lang].title.name }}</strong> {{ profile.profile[lang].name }}</p>\r\n      <p><strong>{{ profile.profile[lang].title.age }}</strong> {{ getDate() }}</p>\r\n      <p><strong>{{ profile.profile[lang].title.birthday }}</strong> {{ profile.profile[lang].birthday }}</p>\r\n      <p><strong>{{ profile.profile[lang].title.address }}</strong> {{ profile.profile[lang].address }}</p>\r\n      <p><strong>{{ profile.profile[lang].title.github }}</strong> <router-link  :to=\"\'/github\'\">{{ profile.profile.github }}</router-link> </p>\r\n      <ul v-for=\"(data, key) in profile.profile[lang].profile\" :key=\"key\">\r\n        <p><strong>{{ profile.profile[lang].title[key] }}</strong></p>\r\n        <li v-for=\"(val, idx) in data\" :key=\"idx\">{{ val }}</li>\r\n      </ul>\r\n    </div>\r\n    <div class=\"row\">\r\n      <h3 class=\"page-header\">{{ profile.profile[lang].title.career }}</h3>\r\n      <ul v-for=\"(data, key) in profile.profile[lang].curriculum\" :key=\"key\">\r\n        <h4>{{ key }}</h4>\r\n        <li v-for=\"(val, idx) in data\" :key=\"idx\">{{ val }}</li>\r\n      </ul>\r\n    </div>\r\n    <div class=\"row page-footer blue\">\r\n      <p>Copyright 2018. JUNHO MUN. All rights reserved. </p>\r\n    </div>\r\n</div>\r\n<div v-else>데이터 가져오는중</div>\r\n</template>\r\n<script>\r\n// 주소영문변환 url\r\n// http://www.epost.go.kr/search.RetrieveIntegrationNewZipCdList.comm\r\nexport default {\r\n  name: \'Index\',\r\n  computed: {\r\n    profile () {\r\n      return this.$store.state.profile\r\n    }\r\n  },\r\n  created () {\r\n    this.$store.dispatch(\'setJsonData\')\r\n  },\r\n  data () {\r\n    return {\r\n      lang: \'en\'\r\n    }\r\n  },\r\n  methods: {\r\n    getDate: () => {\r\n      let date = new Date()\r\n      return ((date.getFullYear() + 1) + \'\').substring(2, 4)\r\n    }\r\n  },\r\n  mounted () {\r\n    // const fire = new Fire()\r\n    // fire.stop()\r\n  }\r\n}\r\n</script>\r\n```\r\n\r\n별도의 스타일은 코드에 첨부하지 않겠습니다.\r\nJson 데이터를 활용하여 만들었고 이 json파일은  this.$store.dispatch(\'setJsonData\') vuex 라는 상태관리 라이브러리를 활용하여 가져왔습니다. \r\n참고사이트 : https://joshua1988.github.io/web-development/vuejs/vuex-start/\r\n\r\nfrontend/src/components/Admin.vue\r\n```\r\n<template>\r\n  <div class=\"panel panel-default\" v-if=\"type != \'success\'\">\r\n    <div class=\"panel-heading\">Admin Page</div>\r\n    <div class=\"panel-body\">\r\n      <div class=\"form-group\">\r\n        <form action=\"\" onsubmit=\"return false\">\r\n          <input type=\"password\" class=\"form-control\" placeholder=\"Password\" v-model=\"password\" autofocus>\r\n          <button class=\"btn btn-primary form-control\" @click=\"send\">Send</button>\r\n        </form>\r\n        <p v-bind:class=\"type\">비밀번호가 일치하지 않습니다.</p>\r\n      </div>\r\n    </div>\r\n  </div>\r\n  <div class=\"container\" v-else>\r\n    <!--  onsubmit=\"return false\" -->\r\n    <form @submit.prevent=\"save\">\r\n      <textarea class=\"form-control\" name=\"data\" rows=\"30\">{{ profile }}</textarea>\r\n      <button type=\"submit\" class=\"btn btn-primary\">저장하기</button>\r\n      <button type=\"button\" class=\"btn btn-primary\" @click=\"download\">다운로드</button>\r\n      <router-link :to=\"\'/\'\"><button class=\"btn btn-primary\">돌아가기</button></router-link>\r\n    </form>\r\n  </div>\r\n</template>\r\n<script>\r\nexport default {\r\n  name: \'Admin\',\r\n  created () {\r\n    this.$store.dispatch(\'setJsonData\')\r\n  },\r\n  computed: {\r\n    profile () {\r\n      return JSON.stringify(this.$store.state.profile, null, 4)\r\n    }\r\n  },\r\n  data: () => {\r\n    return {\r\n      password: \'\',\r\n      real: \'junho\',\r\n      type: \'none\'\r\n      // data: JSON.stringify(json, null, 4)\r\n    }\r\n  },\r\n  methods: {\r\n    send: function () {\r\n      if (this.password === this.real) {\r\n        this.type = \'success\'\r\n      } else {\r\n        this.type = \'error\'\r\n      }\r\n    },\r\n    save: function (event) {\r\n      let data = JSON.parse(event.target.elements.data.value)\r\n      this.$store.dispatch(\'saveJsonData\', data)\r\n    },\r\n    download: function () {\r\n      let href = \'data:text/json;utf-8,\' + encodeURIComponent(JSON.parse(JSON.stringify(this.profile, null, 4)))\r\n      let link = document.createElement(\'a\')\r\n      link.download = \'data.json\'\r\n      link.href = href\r\n      link.click()\r\n    }\r\n  }\r\n}\r\n</script>\r\n```\r\n이 부분 역시 vuex를 활용하여 json데이터를 가져왔습니다. 자세한 내용은 아래에서 설명\r\n\r\n이 두파일을 vue-router에 연결합니다. router/index.js파일을 열어 수정합니다.\r\nfrontend/src/router/index.js\r\n```\r\nimport Vue from \'vue\'\r\nimport App from \'./App\'\r\nimport router from \'./router\'\r\nimport { store } from \'./store/store\'\r\n\r\nVue.config.productionTip = false\r\n\r\n/* eslint-disable no-new */\r\nnew Vue({\r\n  el: \'#app\',\r\n  router,\r\n  store,\r\n  components: { App },\r\n  template: \'<App/>\'\r\n})\r\n```\r\n\r\n이제 위에서 사용한 vuex 상태관리를 하기 위하여 store.js 파일을 만듭니다. (폴더도 만듬)\r\n\r\nfrontend/src/store/store.js\r\n```\r\nimport Vue from \'vue\'\r\nimport Vuex from \'vuex\'\r\nimport axios from \'axios\'\r\n\r\nVue.use(Vuex)\r\nVue.prototype.$http = axios\r\n\r\nexport const store = new Vuex.Store({\r\n  state: {\r\n    profile: {}\r\n  },\r\n  mutations: {\r\n    updateJsonData (state, payload) {\r\n      state.profile = payload\r\n    }\r\n  },\r\n  actions: {\r\n    setJsonData: function (context) {\r\n      axios.get(\'/data/get\').then(response => {\r\n        context.commit(\'updateJsonData\', response.data)\r\n      })\r\n    },\r\n    saveJsonData: function (context, payload) {\r\n      axios.post(\'/data/set\', payload).then(response => {\r\n        this.dispatch(\'setJsonData\', response.data)\r\n      })\r\n    }\r\n  }\r\n})\r\n```\r\nAPI를 비동기로 받아오기 때문에 vuex 의 actions을 활용하였습니다.\r\n참고사이트 : https://joshua1988.github.io/web-development/vuejs/vuex-actions-modules/\r\n\r\nAPI 요청을 위해 axios도 추가하였습니다.\r\nfrontend/src/store/store..js\r\n```\r\nimport axios from \'axios\'\r\nVue.prototype.$http = axios\r\n```\r\n이제 Vue앱에서 this.$http로 HTTP 요청을 할 수 있습니다. \r\n\r\n\r\n\r\n데이터가 제대로 나오고 있지 않으면 express를 재시작해주세요. 현재 서버는 express와 vue의 webpack-dev-server 두가지가 작동중입니다. http://localhost:3000에 접속하면 express에서 제공하는 페이지가 나옵니다.\r\n\r\n이제 Vue 앱을 배포하여 express 서버만 사용해서 접속할 수 있도록 합니다.\r\n\r\nfrontend/config/index.js 파일을 열어 내용을 수정합니다.\r\n\r\nfrontend/config/index.js\r\n```\r\n~~~\r\n index: path.resolve(__dirname, \'../../backend/public/index.html\'),\r\n assetsRoot: path.resolve(__dirname, \'../../backend/public\'),\r\n~~~\r\n```\r\n\r\nfrontend디렉터리에서 npm run build 명령어를 사용하면 backend 의 public 디렉터리에 Vue앱을 빌드한 결과를 만듭니다.\r\n이제 express에서 할 일은 backend/public의 index.html 파일을 실행하는 것 입니다.\r\n\r\nbackend/routes/index.js\r\n```\r\nvar express = require(\'express\');\r\nvar path = require(\'path\');\r\nvar router = express.Router();\r\n\r\nrouter.get(\'/\', function (req, res, next) {\r\n  res.sendFile(path.join(__dirname, \'../public\', \'index.html\'))\r\n});\r\n\r\nmodule.exports = router;\r\n```\r\nhttp://localhost:3000/주소로 접속하면 public/index.html을 보여줍니다. 이 파일이 Vue앱입니다.\r\n\r\n대부분의 형식을 참고사이트를 많이 참조하였습니다.\r\n', '&lt;h2&gt;시작하기\r&lt;/h2&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;express 기반 서버 환경에서 vue를 활용한 자기소개 페이지입니다. 절대 완벽하지 않습니다. 공부하는 입장으로 만들어보았습니다. 저의 정보를 어거지로 넣다보니 코드가 다소 복잡할 수 있습니다. 양해 부탁드립니다. 설명도 참고 사이트를 대부분 활용하였습니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;참고 사이트 :  http://vuejs.kr/2017/02/05/express-with-vue/\r&lt;/p&gt;&lt;p&gt;최종 결과물 : https://github.com/junho2343/my-introduce\r&lt;/p&gt;&lt;p&gt;URL : junhoinfo.herokuapp.com\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;h2&gt;프로젝트 기본 설정\r&lt;/h2&gt;&lt;p&gt;이번 프로젝트의 기본 디렉터리 구조 입니다. 디렉터리 아래에 express를 사용하는 backend, Vue를 사용하는 frontend 디렉터리가 있습니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;_backend\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;_frontend\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;h2&gt;express와 express-generator를 이용한 서버 개발\r&lt;/h2&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;express의 Express 애플리케이션 생성기 문서를 따라 express를 설치하고 앱을 만듭니다.\r&lt;/p&gt;&lt;p&gt;애플리케이션 생성기 문서 : http://expressjs.com/ko/starter/generator.html\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;npm install express-generator -g #설치하지 않은 경우\r&lt;/p&gt;&lt;p&gt;express --view=jade backend\r&lt;/p&gt;&lt;p&gt;cd backend\r&lt;/p&gt;&lt;p&gt;npm install\r&lt;/p&gt;&lt;p&gt;DEBUG=backend:* npm start\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;http://localhost:3000에 접속하면 express 앱이 정상적으로 잘 작동하는 것을 확인할 수 있습니다\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;저는 데이터 베이스를 사용하지 않고 json파일을 직접 가져오는 방식입니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;backend/data.json\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;{\r&lt;/p&gt;&lt;p&gt;    &amp;quot;profile&amp;quot;: {\r&lt;/p&gt;&lt;p&gt;        &amp;quot;github&amp;quot;: &amp;quot;https://github.com/junho2343&amp;quot;,\r&lt;/p&gt;&lt;p&gt;        &amp;quot;kr&amp;quot;: {\r&lt;/p&gt;&lt;p&gt;            &amp;quot;name&amp;quot;: &amp;quot;문준호&amp;quot;,\r&lt;/p&gt;&lt;p&gt;            &amp;quot;job&amp;quot;: &amp;quot;웹 개발자&amp;quot;,\r&lt;/p&gt;&lt;p&gt;            &amp;quot;birthday&amp;quot;: &amp;quot;2000-10-15&amp;quot;,\r&lt;/p&gt;&lt;p&gt;            &amp;quot;address&amp;quot;: &amp;quot;서울특별시 동대문구 사가정로65 (래미안크레시티)&amp;quot;,\r&lt;/p&gt;&lt;p&gt;            &amp;quot;korean&amp;quot;: &amp;quot;한국어&amp;quot;,\r&lt;/p&gt;&lt;p&gt;            &amp;quot;english&amp;quot;: &amp;quot;영어&amp;quot;,\r&lt;/p&gt;&lt;p&gt;            &amp;quot;admin&amp;quot;: &amp;quot;관리자&amp;quot;,\r&lt;/p&gt;&lt;p&gt;            &amp;quot;title&amp;quot;: {\r&lt;/p&gt;&lt;p&gt;                &amp;quot;profile&amp;quot;: &amp;quot;프로필&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;name&amp;quot;: &amp;quot;이름: &amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;age&amp;quot;: &amp;quot;나이: &amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;birthday&amp;quot;: &amp;quot;생년월일: &amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;address&amp;quot;: &amp;quot;주소: &amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;school&amp;quot;: &amp;quot;학력: &amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;certificate&amp;quot;: &amp;quot;자격증&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;career&amp;quot;: &amp;quot;경력&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;skills&amp;quot;: &amp;quot;기술&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;github&amp;quot;: &amp;quot;깃허브: &amp;quot;\r&lt;/p&gt;&lt;p&gt;            },\r&lt;/p&gt;&lt;p&gt;            &amp;quot;profile&amp;quot;: {\r&lt;/p&gt;&lt;p&gt;                &amp;quot;school&amp;quot;: [\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;전곡 초등학교 졸업&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;전농 중학교 졸업&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;서울 디지텍 고등학교 졸업&amp;quot;\r&lt;/p&gt;&lt;p&gt;                ],\r&lt;/p&gt;&lt;p&gt;                &amp;quot;certificate&amp;quot;: [\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;정보처리기능사&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;웹디자인기능사&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;지도제작기능사&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;아이티큐 마스터&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;컴퓨터그래픽스운용기능사&amp;quot;\r&lt;/p&gt;&lt;p&gt;                ],\r&lt;/p&gt;&lt;p&gt;                &amp;quot;skills&amp;quot;: [\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;HTML5&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;CSS3&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;JavaScript&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;jQuery&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;Vue.js&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;Node.js&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;PHP&amp;quot;\r&lt;/p&gt;&lt;p&gt;                ]\r&lt;/p&gt;&lt;p&gt;            },\r&lt;/p&gt;&lt;p&gt;            &amp;quot;curriculum&amp;quot;: {\r&lt;/p&gt;&lt;p&gt;                &amp;quot;2016&amp;quot;: [\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;스마트스페이스 동아리 활동&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;교내 웹/앱 경진대회 대상&amp;quot;\r&lt;/p&gt;&lt;p&gt;                ],\r&lt;/p&gt;&lt;p&gt;                &amp;quot;2017&amp;quot;: [\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;웹 디자인/개발 기능영재반 활동&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;교내 웹/앱 경진대회 우수상&amp;quot;\r&lt;/p&gt;&lt;p&gt;                ],\r&lt;/p&gt;&lt;p&gt;                &amp;quot;2018&amp;quot;: [\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;서울 지방기능경기대회 은메달&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;전국기능경기대회 은메달&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;(주) 플레이오토 입사&amp;quot;\r&lt;/p&gt;&lt;p&gt;                ],\r&lt;/p&gt;&lt;p&gt;                &amp;quot;2019&amp;quot;: []\r&lt;/p&gt;&lt;p&gt;            }\r&lt;/p&gt;&lt;p&gt;        },\r&lt;/p&gt;&lt;p&gt;        &amp;quot;en&amp;quot;: {\r&lt;/p&gt;&lt;p&gt;            &amp;quot;name&amp;quot;: &amp;quot;junho mun&amp;quot;,\r&lt;/p&gt;&lt;p&gt;            &amp;quot;job&amp;quot;: &amp;quot;Web Developer&amp;quot;,\r&lt;/p&gt;&lt;p&gt;            &amp;quot;birthday&amp;quot;: &amp;quot;15/10/2000&amp;quot;,\r&lt;/p&gt;&lt;p&gt;            &amp;quot;address&amp;quot;: &amp;quot;65, Sagajeong-ro, Dongdaemun-gu, Seoul, 02553, Rep. of KOREA&amp;quot;,\r&lt;/p&gt;&lt;p&gt;            &amp;quot;korean&amp;quot;: &amp;quot;korean&amp;quot;,\r&lt;/p&gt;&lt;p&gt;            &amp;quot;english&amp;quot;: &amp;quot;english&amp;quot;,\r&lt;/p&gt;&lt;p&gt;            &amp;quot;admin&amp;quot;: &amp;quot;admin&amp;quot;,\r&lt;/p&gt;&lt;p&gt;            &amp;quot;title&amp;quot;: {\r&lt;/p&gt;&lt;p&gt;                &amp;quot;profile&amp;quot;: &amp;quot;PROFILE&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;name&amp;quot;: &amp;quot;name: &amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;age&amp;quot;: &amp;quot;age: &amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;birthday&amp;quot;: &amp;quot;birthday: &amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;address&amp;quot;: &amp;quot;address: &amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;school&amp;quot;: &amp;quot;school: &amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;certificate&amp;quot;: &amp;quot;certificate&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;career&amp;quot;: &amp;quot;CAREER&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;skills&amp;quot;: &amp;quot;skills&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                &amp;quot;github&amp;quot;: &amp;quot;github: &amp;quot;\r&lt;/p&gt;&lt;p&gt;            },\r&lt;/p&gt;&lt;p&gt;            &amp;quot;profile&amp;quot;: {\r&lt;/p&gt;&lt;p&gt;                &amp;quot;school&amp;quot;: [\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;Jeongok Elementary School Graduation&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;Junnong Middle School Graduation&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;Seoul Digitec High School Graduation&amp;quot;\r&lt;/p&gt;&lt;p&gt;                ],\r&lt;/p&gt;&lt;p&gt;                &amp;quot;certificate&amp;quot;: [\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;Information processing Functional engineer&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;Web Design Functional engineer&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;Map production Functional engineer&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;ITQ Master&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;Computer Graphics Functional engineer&amp;quot;\r&lt;/p&gt;&lt;p&gt;                ],\r&lt;/p&gt;&lt;p&gt;                &amp;quot;skills&amp;quot;: [\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;HTML5&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;CSS3&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;JavaScript&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;jQuery&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;Vue.js&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;Node.js&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;PHP&amp;quot;\r&lt;/p&gt;&lt;p&gt;                ]\r&lt;/p&gt;&lt;p&gt;            },\r&lt;/p&gt;&lt;p&gt;            &amp;quot;curriculum&amp;quot;: {\r&lt;/p&gt;&lt;p&gt;                &amp;quot;2016&amp;quot;: [\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;Smart Space club&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;School in Web/App Competition grand prize&amp;quot;\r&lt;/p&gt;&lt;p&gt;                ],\r&lt;/p&gt;&lt;p&gt;                &amp;quot;2017&amp;quot;: [\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;Web Design/Development club&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;School in Web/App Competition excellence prize&amp;quot;\r&lt;/p&gt;&lt;p&gt;                ],\r&lt;/p&gt;&lt;p&gt;                &amp;quot;2018&amp;quot;: [\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;Seoul Regional Function Competition a silver medal&amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;Nationwide Function Competition a silver medal &amp;quot;,\r&lt;/p&gt;&lt;p&gt;                    &amp;quot;PLAYAUTO Company Join&amp;quot;\r&lt;/p&gt;&lt;p&gt;                ],\r&lt;/p&gt;&lt;p&gt;                &amp;quot;2019&amp;quot;: []\r&lt;/p&gt;&lt;p&gt;            }\r&lt;/p&gt;&lt;p&gt;        }\r&lt;/p&gt;&lt;p&gt;    },\r&lt;/p&gt;&lt;p&gt;    &amp;quot;lang&amp;quot;: &amp;quot;en&amp;quot;\r&lt;/p&gt;&lt;p&gt;}\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;.이제 위 정보를 가져올 수 있는 API를 만듭니다. 여기서는 두개를 만듭니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;Json 데이터를 가져오는 GET방식의 /get\r&lt;/p&gt;&lt;p&gt;Json 데이터를 수정하는 POST방식의 /set\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;backend/routes/data.js\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;let express = require(\'express\');\r&lt;/p&gt;&lt;p&gt;let router = express.Router();\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;const fs = require(\'fs\')\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;/* GET home page. */\r&lt;/p&gt;&lt;p&gt;router.get(\'/\', function(req, res, next) {\r&lt;/p&gt;&lt;p&gt;});\r&lt;/p&gt;&lt;p&gt;router.get(\'/get\', function(req, res, next) {\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;	fs.readFile(&amp;quot;data.json&amp;quot;, function (err, data) {\r&lt;/p&gt;&lt;p&gt;		if(err) throw err;\r&lt;/p&gt;&lt;p&gt;		res.send(data)\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;	})\r&lt;/p&gt;&lt;p&gt;});\r&lt;/p&gt;&lt;p&gt;router.post(\'/set\', function(req, res, next) {\r&lt;/p&gt;&lt;p&gt;	let data = JSON.stringify(req.body);\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;	fs.writeFile(\'data.json\', data, \'utf8\', function (err) {\r&lt;/p&gt;&lt;p&gt;		if(err) throw err\r&lt;/p&gt;&lt;p&gt;	})\r&lt;/p&gt;&lt;p&gt;});\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;module.exports = router;\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;이 data.js 파일을 사용할 수 있도록 app.js에 등록합니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;backend/app.js\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;~~~\r&lt;/p&gt;&lt;p&gt;var indexRouter = require(\'./routes/index\');\r&lt;/p&gt;&lt;p&gt;var dataRouter = require(\'./routes/data\');\r&lt;/p&gt;&lt;p&gt;~~~\r&lt;/p&gt;&lt;p&gt;app.use(\'/\', indexRouter);;\r&lt;/p&gt;&lt;p&gt;app.use(\'/data\', dataRouter);\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;이제 http://localhost:3000/data/get에 접속하면 json에 대한 내용을 가져 올 수 있습니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;h2&gt;Vue.js와 vue-cli를 이용한 프론트엔드 개발\r&lt;/h2&gt;&lt;p&gt;이제 Vue.js로 백엔드에서 작업한 내용을 출력할 차례입니다. 우선 vue-cli 작업을 합니다. 루트 디렉터리에서 실행합니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;npm install -g vue-cli  #설치하지 않은 경우\r&lt;/p&gt;&lt;p&gt;vue init webpack frontend\r&lt;/p&gt;&lt;p&gt;#프롬프트마다 필요한 설정을 합니다. \r&lt;/p&gt;&lt;p&gt;#vue-router 추가에 대한 질문은 꼭 Y를 해주세요\r&lt;/p&gt;&lt;p&gt;cd frontend\r&lt;/p&gt;&lt;p&gt;npm install\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;위 작업이 끝나면 express 서버와 연결하기 위한 설정을 해야합니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;frontend/config/index.js 파일을 열어 proxyTable을 찾아 아래 내용을 추가합니다.\r&lt;/p&gt;&lt;p&gt;frontend/config/index.js\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;proxyTable: {\r&lt;/p&gt;&lt;p&gt;  \'/api\': {\r&lt;/p&gt;&lt;p&gt;    target: \'http://localhost:3000/data\',\r&lt;/p&gt;&lt;p&gt;    changeOrigin: true,\r&lt;/p&gt;&lt;p&gt;    pathRewrite: {\r&lt;/p&gt;&lt;p&gt;      \'^/data\': \'\'\r&lt;/p&gt;&lt;p&gt;    }\r&lt;/p&gt;&lt;p&gt;  }\r&lt;/p&gt;&lt;p&gt;},\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;위 설정을 하면 프론트엔드 개발 중 http://localhost:8080/data 요청이 왔을 경우 http://localhost:3000/data를 프록시로 사용하게 됩니다\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;Vue 앱의 페이지는 두개 입니다. 전체 내 정보를 볼 수 있는 Index 페이지와 관리자로서 Json파일을 수정 할 수 있는 Admin 페이지 입니다. 이를 위해 두개의 단일 파일 컴포넌트가 필요합니다. 이름은 Index.vue, Admin.vue 입니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;frontend/src/components/Index.vue\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;&amp;lt;template&amp;gt;\r&lt;/p&gt;&lt;p&gt;  &amp;lt;div class=&amp;quot;container&amp;quot; v-if=&amp;quot;Object.keys(profile).length&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;canvas id=&amp;quot;fire&amp;quot;&amp;gt;&amp;lt;/canvas&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;div class=&amp;quot;row first&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;button class=&amp;quot;btn btn-light&amp;quot; @click=&amp;quot;lang = \'kr\'&amp;quot; v-html=&amp;quot;profile.profile[lang].korean&amp;quot; /&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;button class=&amp;quot;btn btn-light&amp;quot; @click=&amp;quot;lang = \'en\'&amp;quot; v-html=&amp;quot;profile.profile[lang].english&amp;quot; /&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;router-link :to=&amp;quot;\'/admin\'&amp;quot;&amp;gt;&amp;lt;button class=&amp;quot;btn btn-light&amp;quot; v-html=&amp;quot;profile.profile[lang].admin&amp;quot; /&amp;gt;&amp;lt;/router-link&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;/div&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;h2 class=&amp;quot;page-header&amp;quot;&amp;gt;{{ profile.profile[lang].name.toUpperCase() }} &amp;lt;small&amp;gt;{{ profile.profile[lang].job }}&amp;lt;/small&amp;gt;&amp;lt;/h2&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;/div&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;h3 class=&amp;quot;page-header&amp;quot;&amp;gt;{{ profile.profile[lang].title.profile }}&amp;lt;/h3&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;{{ profile.profile[lang].title.name }}&amp;lt;/strong&amp;gt; {{ profile.profile[lang].name }}&amp;lt;/p&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;{{ profile.profile[lang].title.age }}&amp;lt;/strong&amp;gt; {{ getDate() }}&amp;lt;/p&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;{{ profile.profile[lang].title.birthday }}&amp;lt;/strong&amp;gt; {{ profile.profile[lang].birthday }}&amp;lt;/p&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;{{ profile.profile[lang].title.address }}&amp;lt;/strong&amp;gt; {{ profile.profile[lang].address }}&amp;lt;/p&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;{{ profile.profile[lang].title.github }}&amp;lt;/strong&amp;gt; &amp;lt;router-link  :to=&amp;quot;\'/github\'&amp;quot;&amp;gt;{{ profile.profile.github }}&amp;lt;/router-link&amp;gt; &amp;lt;/p&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;ul v-for=&amp;quot;(data, key) in profile.profile[lang].profile&amp;quot; :key=&amp;quot;key&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;        &amp;lt;p&amp;gt;&amp;lt;strong&amp;gt;{{ profile.profile[lang].title[key] }}&amp;lt;/strong&amp;gt;&amp;lt;/p&amp;gt;\r&lt;/p&gt;&lt;p&gt;        &amp;lt;li v-for=&amp;quot;(val, idx) in data&amp;quot; :key=&amp;quot;idx&amp;quot;&amp;gt;{{ val }}&amp;lt;/li&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;/ul&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;/div&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;div class=&amp;quot;row&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;h3 class=&amp;quot;page-header&amp;quot;&amp;gt;{{ profile.profile[lang].title.career }}&amp;lt;/h3&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;ul v-for=&amp;quot;(data, key) in profile.profile[lang].curriculum&amp;quot; :key=&amp;quot;key&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;        &amp;lt;h4&amp;gt;{{ key }}&amp;lt;/h4&amp;gt;\r&lt;/p&gt;&lt;p&gt;        &amp;lt;li v-for=&amp;quot;(val, idx) in data&amp;quot; :key=&amp;quot;idx&amp;quot;&amp;gt;{{ val }}&amp;lt;/li&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;/ul&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;/div&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;div class=&amp;quot;row page-footer blue&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;p&amp;gt;Copyright 2018. JUNHO MUN. All rights reserved. &amp;lt;/p&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;/div&amp;gt;\r&lt;/p&gt;&lt;p&gt;&amp;lt;/div&amp;gt;\r&lt;/p&gt;&lt;p&gt;&amp;lt;div v-else&amp;gt;데이터 가져오는중&amp;lt;/div&amp;gt;\r&lt;/p&gt;&lt;p&gt;&amp;lt;/template&amp;gt;\r&lt;/p&gt;&lt;p&gt;&amp;lt;script&amp;gt;\r&lt;/p&gt;&lt;p&gt;// 주소영문변환 url\r&lt;/p&gt;&lt;p&gt;// http://www.epost.go.kr/search.RetrieveIntegrationNewZipCdList.comm\r&lt;/p&gt;&lt;p&gt;export default {\r&lt;/p&gt;&lt;p&gt;  name: \'Index\',\r&lt;/p&gt;&lt;p&gt;  computed: {\r&lt;/p&gt;&lt;p&gt;    profile () {\r&lt;/p&gt;&lt;p&gt;      return this.$store.state.profile\r&lt;/p&gt;&lt;p&gt;    }\r&lt;/p&gt;&lt;p&gt;  },\r&lt;/p&gt;&lt;p&gt;  created () {\r&lt;/p&gt;&lt;p&gt;    this.$store.dispatch(\'setJsonData\')\r&lt;/p&gt;&lt;p&gt;  },\r&lt;/p&gt;&lt;p&gt;  data () {\r&lt;/p&gt;&lt;p&gt;    return {\r&lt;/p&gt;&lt;p&gt;      lang: \'en\'\r&lt;/p&gt;&lt;p&gt;    }\r&lt;/p&gt;&lt;p&gt;  },\r&lt;/p&gt;&lt;p&gt;  methods: {\r&lt;/p&gt;&lt;p&gt;    getDate: () =&amp;gt; {\r&lt;/p&gt;&lt;p&gt;      let date = new Date()\r&lt;/p&gt;&lt;p&gt;      return ((date.getFullYear() + 1) + \'\').substring(2, 4)\r&lt;/p&gt;&lt;p&gt;    }\r&lt;/p&gt;&lt;p&gt;  },\r&lt;/p&gt;&lt;p&gt;  mounted () {\r&lt;/p&gt;&lt;p&gt;    // const fire = new Fire()\r&lt;/p&gt;&lt;p&gt;    // fire.stop()\r&lt;/p&gt;&lt;p&gt;  }\r&lt;/p&gt;&lt;p&gt;}\r&lt;/p&gt;&lt;p&gt;&amp;lt;/script&amp;gt;\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;별도의 스타일은 코드에 첨부하지 않겠습니다.\r&lt;/p&gt;&lt;p&gt;Json 데이터를 활용하여 만들었고 이 json파일은  this.$store.dispatch(\'setJsonData\') vuex 라는 상태관리 라이브러리를 활용하여 가져왔습니다. \r&lt;/p&gt;&lt;p&gt;참고사이트 : https://joshua1988.github.io/web-development/vuejs/vuex-start/\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;frontend/src/components/Admin.vue\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;&amp;lt;template&amp;gt;\r&lt;/p&gt;&lt;p&gt;  &amp;lt;div class=&amp;quot;panel panel-default&amp;quot; v-if=&amp;quot;type != \'success\'&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;div class=&amp;quot;panel-heading&amp;quot;&amp;gt;Admin Page&amp;lt;/div&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;div class=&amp;quot;panel-body&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;div class=&amp;quot;form-group&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;        &amp;lt;form action=&amp;quot;&amp;quot; onsubmit=&amp;quot;return false&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;          &amp;lt;input type=&amp;quot;password&amp;quot; class=&amp;quot;form-control&amp;quot; placeholder=&amp;quot;Password&amp;quot; v-model=&amp;quot;password&amp;quot; autofocus&amp;gt;\r&lt;/p&gt;&lt;p&gt;          &amp;lt;button class=&amp;quot;btn btn-primary form-control&amp;quot; @click=&amp;quot;send&amp;quot;&amp;gt;Send&amp;lt;/button&amp;gt;\r&lt;/p&gt;&lt;p&gt;        &amp;lt;/form&amp;gt;\r&lt;/p&gt;&lt;p&gt;        &amp;lt;p v-bind:class=&amp;quot;type&amp;quot;&amp;gt;비밀번호가 일치하지 않습니다.&amp;lt;/p&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;/div&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;/div&amp;gt;\r&lt;/p&gt;&lt;p&gt;  &amp;lt;/div&amp;gt;\r&lt;/p&gt;&lt;p&gt;  &amp;lt;div class=&amp;quot;container&amp;quot; v-else&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;!--  onsubmit=&amp;quot;return false&amp;quot; --&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;form @submit.prevent=&amp;quot;save&amp;quot;&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;textarea class=&amp;quot;form-control&amp;quot; name=&amp;quot;data&amp;quot; rows=&amp;quot;30&amp;quot;&amp;gt;{{ profile }}&amp;lt;/textarea&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;button type=&amp;quot;submit&amp;quot; class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;저장하기&amp;lt;/button&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;button type=&amp;quot;button&amp;quot; class=&amp;quot;btn btn-primary&amp;quot; @click=&amp;quot;download&amp;quot;&amp;gt;다운로드&amp;lt;/button&amp;gt;\r&lt;/p&gt;&lt;p&gt;      &amp;lt;router-link :to=&amp;quot;\'/\'&amp;quot;&amp;gt;&amp;lt;button class=&amp;quot;btn btn-primary&amp;quot;&amp;gt;돌아가기&amp;lt;/button&amp;gt;&amp;lt;/router-link&amp;gt;\r&lt;/p&gt;&lt;p&gt;    &amp;lt;/form&amp;gt;\r&lt;/p&gt;&lt;p&gt;  &amp;lt;/div&amp;gt;\r&lt;/p&gt;&lt;p&gt;&amp;lt;/template&amp;gt;\r&lt;/p&gt;&lt;p&gt;&amp;lt;script&amp;gt;\r&lt;/p&gt;&lt;p&gt;export default {\r&lt;/p&gt;&lt;p&gt;  name: \'Admin\',\r&lt;/p&gt;&lt;p&gt;  created () {\r&lt;/p&gt;&lt;p&gt;    this.$store.dispatch(\'setJsonData\')\r&lt;/p&gt;&lt;p&gt;  },\r&lt;/p&gt;&lt;p&gt;  computed: {\r&lt;/p&gt;&lt;p&gt;    profile () {\r&lt;/p&gt;&lt;p&gt;      return JSON.stringify(this.$store.state.profile, null, 4)\r&lt;/p&gt;&lt;p&gt;    }\r&lt;/p&gt;&lt;p&gt;  },\r&lt;/p&gt;&lt;p&gt;  data: () =&amp;gt; {\r&lt;/p&gt;&lt;p&gt;    return {\r&lt;/p&gt;&lt;p&gt;      password: \'\',\r&lt;/p&gt;&lt;p&gt;      real: \'junho\',\r&lt;/p&gt;&lt;p&gt;      type: \'none\'\r&lt;/p&gt;&lt;p&gt;      // data: JSON.stringify(json, null, 4)\r&lt;/p&gt;&lt;p&gt;    }\r&lt;/p&gt;&lt;p&gt;  },\r&lt;/p&gt;&lt;p&gt;  methods: {\r&lt;/p&gt;&lt;p&gt;    send: function () {\r&lt;/p&gt;&lt;p&gt;      if (this.password === this.real) {\r&lt;/p&gt;&lt;p&gt;        this.type = \'success\'\r&lt;/p&gt;&lt;p&gt;      } else {\r&lt;/p&gt;&lt;p&gt;        this.type = \'error\'\r&lt;/p&gt;&lt;p&gt;      }\r&lt;/p&gt;&lt;p&gt;    },\r&lt;/p&gt;&lt;p&gt;    save: function (event) {\r&lt;/p&gt;&lt;p&gt;      let data = JSON.parse(event.target.elements.data.value)\r&lt;/p&gt;&lt;p&gt;      this.$store.dispatch(\'saveJsonData\', data)\r&lt;/p&gt;&lt;p&gt;    },\r&lt;/p&gt;&lt;p&gt;    download: function () {\r&lt;/p&gt;&lt;p&gt;      let href = \'data:text/json;utf-8,\' + encodeURIComponent(JSON.parse(JSON.stringify(this.profile, null, 4)))\r&lt;/p&gt;&lt;p&gt;      let link = document.createElement(\'a\')\r&lt;/p&gt;&lt;p&gt;      link.download = \'data.json\'\r&lt;/p&gt;&lt;p&gt;      link.href = href\r&lt;/p&gt;&lt;p&gt;      link.click()\r&lt;/p&gt;&lt;p&gt;    }\r&lt;/p&gt;&lt;p&gt;  }\r&lt;/p&gt;&lt;p&gt;}\r&lt;/p&gt;&lt;p&gt;&amp;lt;/script&amp;gt;\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;이 부분 역시 vuex를 활용하여 json데이터를 가져왔습니다. 자세한 내용은 아래에서 설명\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;이 두파일을 vue-router에 연결합니다. router/index.js파일을 열어 수정합니다.\r&lt;/p&gt;&lt;p&gt;frontend/src/router/index.js\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;import Vue from \'vue\'\r&lt;/p&gt;&lt;p&gt;import App from \'./App\'\r&lt;/p&gt;&lt;p&gt;import router from \'./router\'\r&lt;/p&gt;&lt;p&gt;import { store } from \'./store/store\'\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;Vue.config.productionTip = false\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;/* eslint-disable no-new */\r&lt;/p&gt;&lt;p&gt;new Vue({\r&lt;/p&gt;&lt;p&gt;  el: \'#app\',\r&lt;/p&gt;&lt;p&gt;  router,\r&lt;/p&gt;&lt;p&gt;  store,\r&lt;/p&gt;&lt;p&gt;  components: { App },\r&lt;/p&gt;&lt;p&gt;  template: \'&amp;lt;App/&amp;gt;\'\r&lt;/p&gt;&lt;p&gt;})\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;이제 위에서 사용한 vuex 상태관리를 하기 위하여 store.js 파일을 만듭니다. (폴더도 만듬)\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;frontend/src/store/store.js\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;import Vue from \'vue\'\r&lt;/p&gt;&lt;p&gt;import Vuex from \'vuex\'\r&lt;/p&gt;&lt;p&gt;import axios from \'axios\'\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;Vue.use(Vuex)\r&lt;/p&gt;&lt;p&gt;Vue.prototype.$http = axios\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;export const store = new Vuex.Store({\r&lt;/p&gt;&lt;p&gt;  state: {\r&lt;/p&gt;&lt;p&gt;    profile: {}\r&lt;/p&gt;&lt;p&gt;  },\r&lt;/p&gt;&lt;p&gt;  mutations: {\r&lt;/p&gt;&lt;p&gt;    updateJsonData (state, payload) {\r&lt;/p&gt;&lt;p&gt;      state.profile = payload\r&lt;/p&gt;&lt;p&gt;    }\r&lt;/p&gt;&lt;p&gt;  },\r&lt;/p&gt;&lt;p&gt;  actions: {\r&lt;/p&gt;&lt;p&gt;    setJsonData: function (context) {\r&lt;/p&gt;&lt;p&gt;      axios.get(\'/data/get\').then(response =&amp;gt; {\r&lt;/p&gt;&lt;p&gt;        context.commit(\'updateJsonData\', response.data)\r&lt;/p&gt;&lt;p&gt;      })\r&lt;/p&gt;&lt;p&gt;    },\r&lt;/p&gt;&lt;p&gt;    saveJsonData: function (context, payload) {\r&lt;/p&gt;&lt;p&gt;      axios.post(\'/data/set\', payload).then(response =&amp;gt; {\r&lt;/p&gt;&lt;p&gt;        this.dispatch(\'setJsonData\', response.data)\r&lt;/p&gt;&lt;p&gt;      })\r&lt;/p&gt;&lt;p&gt;    }\r&lt;/p&gt;&lt;p&gt;  }\r&lt;/p&gt;&lt;p&gt;})\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;API를 비동기로 받아오기 때문에 vuex 의 actions을 활용하였습니다.\r&lt;/p&gt;&lt;p&gt;참고사이트 : https://joshua1988.github.io/web-development/vuejs/vuex-actions-modules/\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;API 요청을 위해 axios도 추가하였습니다.\r&lt;/p&gt;&lt;p&gt;frontend/src/store/store..js\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;import axios from \'axios\'\r&lt;/p&gt;&lt;p&gt;Vue.prototype.$http = axios\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;이제 Vue앱에서 this.$http로 HTTP 요청을 할 수 있습니다. \r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;데이터가 제대로 나오고 있지 않으면 express를 재시작해주세요. 현재 서버는 express와 vue의 webpack-dev-server 두가지가 작동중입니다. http://localhost:3000에 접속하면 express에서 제공하는 페이지가 나옵니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;이제 Vue 앱을 배포하여 express 서버만 사용해서 접속할 수 있도록 합니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;frontend/config/index.js 파일을 열어 내용을 수정합니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;frontend/config/index.js\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;~~~\r&lt;/p&gt;&lt;p&gt; index: path.resolve(__dirname, \'../../backend/public/index.html\'),\r&lt;/p&gt;&lt;p&gt; assetsRoot: path.resolve(__dirname, \'../../backend/public\'),\r&lt;/p&gt;&lt;p&gt;~~~\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;frontend디렉터리에서 npm run build 명령어를 사용하면 backend 의 public 디렉터리에 Vue앱을 빌드한 결과를 만듭니다.\r&lt;/p&gt;&lt;p&gt;이제 express에서 할 일은 backend/public의 index.html 파일을 실행하는 것 입니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;backend/routes/index.js\r&lt;/p&gt;&lt;p&gt;&lt;pre class=\'pre\'&gt;&lt;/p&gt;&lt;p&gt;var express = require(\'express\');\r&lt;/p&gt;&lt;p&gt;var path = require(\'path\');\r&lt;/p&gt;&lt;p&gt;var router = express.Router();\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;router.get(\'/\', function (req, res, next) {\r&lt;/p&gt;&lt;p&gt;  res.sendFile(path.join(__dirname, \'../public\', \'index.html\'))\r&lt;/p&gt;&lt;p&gt;});\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;module.exports = router;\r&lt;/p&gt;&lt;p&gt;&lt;/pre&gt;&lt;/p&gt;&lt;p&gt;http://localhost:3000/주소로 접속하면 public/index.html을 보여줍니다. 이 파일이 Vue앱입니다.\r&lt;/p&gt;&lt;p&gt;\r&lt;/p&gt;&lt;p&gt;대부분의 형식을 참고사이트를 많이 참조하였습니다.\r&lt;/p&gt;&lt;p&gt;&lt;/p&gt;', '2018-11-13', 24, 6, NULL, NULL);

-- --------------------------------------------------------

--
-- 테이블 구조 `users`
--

CREATE TABLE `users` (
  `id` int(10) UNSIGNED NOT NULL,
  `name` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `email_verified_at` timestamp NULL DEFAULT NULL,
  `password` varchar(191) COLLATE utf8mb4_unicode_ci NOT NULL,
  `remember_token` varchar(100) COLLATE utf8mb4_unicode_ci DEFAULT NULL,
  `created_at` timestamp NULL DEFAULT NULL,
  `updated_at` timestamp NULL DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COLLATE=utf8mb4_unicode_ci;

--
-- 덤프된 테이블의 인덱스
--

--
-- 테이블의 인덱스 `category`
--
ALTER TABLE `category`
  ADD PRIMARY KEY (`idx`);

--
-- 테이블의 인덱스 `migrations`
--
ALTER TABLE `migrations`
  ADD PRIMARY KEY (`id`);

--
-- 테이블의 인덱스 `password_resets`
--
ALTER TABLE `password_resets`
  ADD KEY `password_resets_email_index` (`email`);

--
-- 테이블의 인덱스 `post`
--
ALTER TABLE `post`
  ADD PRIMARY KEY (`idx`);

--
-- 테이블의 인덱스 `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`),
  ADD UNIQUE KEY `users_email_unique` (`email`);

--
-- 덤프된 테이블의 AUTO_INCREMENT
--

--
-- 테이블의 AUTO_INCREMENT `category`
--
ALTER TABLE `category`
  MODIFY `idx` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=7;

--
-- 테이블의 AUTO_INCREMENT `migrations`
--
ALTER TABLE `migrations`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=5;

--
-- 테이블의 AUTO_INCREMENT `post`
--
ALTER TABLE `post`
  MODIFY `idx` int(10) UNSIGNED NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;

--
-- 테이블의 AUTO_INCREMENT `users`
--
ALTER TABLE `users`
  MODIFY `id` int(10) UNSIGNED NOT NULL AUTO_INCREMENT;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
